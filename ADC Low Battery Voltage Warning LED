//ADC WINDOW COMPARE as BATTERY VOLTAGE MONITOR. USES PD6 AS INPUT AND PA5 AS LOW VOLTAGE WARNING LED. REVISED 6/22/2022.

/* This example shows how to measure battery voltage and turn on an LED when the voltage drops below a specified threshold using the Window Comparator.

	This example uses pin PD6 to measure the voltage, and pin PA5 to control the LED.
	
	The only way I could get this to work was by using a voltage divider to drop the measured voltage down to half of the source voltage. Because of this, 
	there will likely be some inaccuracy due to temperature changes. I used two 10k Ohm resistors. One between PD6 and VCC, and one between PD6 and Ground.
	This way PD6 will be half of the source voltage. In this example, the Low Battery Warning LED will turn on when the battery voltage dips below 3 volts.
	This voltage can be changed by adjusting the Window Comparator Low Threshold, the internal reference voltage, or by by using different values for the 
	resistors in the voltage divider. */

  #include <avr/io.h>
  #include <stdbool.h>

  uint16_t adcVal;

  void ADC0_init(void);
  uint16_t ADC0_read(void);
  void ADC0_start(void);
  bool ADC0_conersionDone(void);
  bool ADC0_resultBelowTreshold(void);
  bool ADC_WINSRC_RESULT(void);
  void ADC0_clearWindowCmpIntFlag(void);
  void ADC0_init(void)
  {
  PORTD.PIN6CTRL &= ~PORT_ISC_gm;					/* Disable digital input buffer */
  PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;		/* Disable digital input buffer */
  PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;				/* Disable pull-up resistor */
  VREF_CTRLA |= VREF_ADC0REFSEL_1V5_gc;				/*Set Internal Reference Voltage to 1.5 Volts */
   ADC0.CTRLC = ADC_PRESC_DIV4_gc					/* CLK_PER divided by 4 */
   | ADC_REFSEL_INTREF_gc;							/* Set ADC to use internal reference */
  ADC0.CTRLA = ADC_ENABLE_bm						/* ADC Enable: enabled */
  | ADC_RESSEL_10BIT_gc;							/* 10-bit mode */
  ADC0.MUXPOS  = ADC_MUXPOS_AIN6_gc;				/* Select ADC channel */
  
  ADC0.WINLT = 1023;								/* Set Window Comparator Low Threshold.  10 BIT ADC HAS RANGE FROM 0-1023  */
  ADC0.CTRLE = ADC_WINCM_BELOW_gc;					/* Set conversion window mode */
  ADC0.CTRLA |= ADC_FREERUN_bm;						/* Enable FreeRun mode */
  }


  uint16_t ADC0_read(void)
  {
  ADC0.INTFLAGS = ADC_RESRDY_bm;					/* Clear the interrupt flag by writing 1: */
  return ADC0.RES;
  }


  void ADC0_start(void)
  {
  ADC0.COMMAND = ADC_STCONV_bm;						/* Start conversion */
  }


  bool ADC0_conersionDone(void)
  {
  return (ADC0.INTFLAGS & ADC_RESRDY_bm);
  }


  bool ADC0_resultBelowTreshold(void)
  {
  return (ADC0.INTFLAGS & ADC_WCMP_bm);
  }


  void ADC0_clearWindowCmpIntFlag(void)
  {
  ADC0.INTFLAGS = ADC_WCMP_bm;						/* Clear the interrupt flag by writing 1: */
  }

//_____________________________________________________________________________________________________________________________________________________

  int main(void)
  {
  ADC0_init();
  ADC0_start();
  
//_____________________________________________________________________________________________________________________________________________________
  
  while(1)
  {
  if (ADC0_conersionDone())
  {
  if(ADC0_resultBelowTreshold())
  {
	  
	  PORTA.DIR |= PIN5_bm;							/* Set as output */
	  PORTA.OUT |= PIN5_bm;							/* TURN LED ON */
  ADC0_clearWindowCmpIntFlag();						/* Clear the interrupt flag by writing 1: */
  
  }
  else
  {
  
  PORTA.DIR |= PIN5_bm;								/* Set as output */
  PORTA.OUT &= ~PIN5_bm;							/* TURN LED OFF */
  }
  
  adcVal = ADC0_read();
  }
  }
  }
  
